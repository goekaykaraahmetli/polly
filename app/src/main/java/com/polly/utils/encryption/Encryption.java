package com.polly.utils.encryption;

import java.security.KeyPair;

import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;

import com.polly.utils.encryption.ciphers.AESCipher;
import com.polly.utils.encryption.ciphers.RSACipher;
import com.polly.utils.encryption.exceptions.FailedDecryptionException;
import com.polly.utils.encryption.exceptions.FailedEncryptionException;
import com.polly.utils.encryption.exceptions.FailedKeyGenerationException;
import com.polly.utils.encryption.utils.CipherKeyGenerator;

public class Encryption {
/**
	public static void main(String[] args) {
		try {
			KeyPair keyPair = CipherKeyGenerator.generateRSAKeyPair(8192);
			SecretKey secretKey = CipherKeyGenerator.generateAESSecretKey();
			
			
			
			
			String test = "%yï¿½vGï¿½=ï¿½ï¿½ï¿½ï¿½?ï¿½2wï¿½ï¿½ï¿½f8Opï¿½p}ï¿½ï¿½p?eï¿½mSï¿½ï¿½Uï¿½ï¿½Xï¿½ï¿½Ó•1-JMï¿½Yï¿½g6ï¿½Pï¿½ï¿½uï¿½(ï¿½ï¿½m$ï¿½lï¿½ï¿½D<ï¿½Bï¿½Dï¿½ï¿½X&UfEï¿½ï¿½ï¿½,ï¿½ï¿½bï¿½ï¿½ï¿½>_+s)h#ï¿½ï¿½ï¿½Uï¿½dnï¿½1>ï¿½ï¿½ï¿½ï¿½ï¿½>ï¿½ï¿½ï¿½\rï¿½ï¿½fï¿½Tï¿½ï¿½?bï¿½SèŒ«#8Cï¿½ï¿½ï¿½ï¿½ï¿½ï¿½-sLH|:T{ï¿½ï¿½Ý˜ï¿½Ð¤ï¿½ï¿½ï¿½ï¿½d8Ø¾ï¿½ZTï¿½ï¿½i=Û£Îƒï¿½ï¿½Æ„G|ï¿½Lï¿½ï¿½ë½™ï¿½a^~oï¿½ï¿½vï¿½qndï¿½Üµï¿½CEË‘ï¿½ï¿½ï¿½ï¿½(Xï¿½[{ï¿½?ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Gï¿½P$v7lmÔŽ?ï¿½ï¿½@ï¿½R[";
			byte[] testBytes = test.getBytes();
			
			
			byte[] encryptedBytes = AESCipher.encrypt(testBytes, secretKey);
			
			byte[] encryptedKey = RSACipher.encrypt(secretKey.getEncoded(), keyPair.getPublic());
			
			byte[] decryptedKey = RSACipher.decrypt(encryptedKey, keyPair.getPrivate());
			
			SecretKey sk = new SecretKeySpec(decryptedKey, "AES");
			
			byte[] decryptedBytes = AESCipher.decrypt(encryptedBytes, sk);
			System.out.println(test);
			System.out.println(new String(decryptedBytes));
			
			System.out.println(test.equals(new String(decryptedBytes)));
			
			
		} catch (FailedKeyGenerationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
 **/
}
